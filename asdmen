DECLARE
    ---rekord
    TYPE t_emp IS RECORD (emp_id employees.employee_id%TYPE, sal employees.salary%TYPE);
    v_emp t_emp;
BEGIN
    --update
    UPDATE employees
    SET salary=10000
    WHERE employee_id=102;
    
    --delete
    DELETE FROM employees WHERE employees.employee_id = 206
    RETURNING employee_id,salary INTO v_emp;
    
    --kivételkezelés
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nem talált a feltételnek megfelelő adatot');
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Több sort talált mint egy, nem tudja SELCT INTO kezelni');
END;

/

DECLARE
---dinamikus tömb
    TYPE t_points_arr IS VARRAY(10) OF number;
    v_points t_points_arr := t_points_arr();
    v_points_2 t_points_arr := t_points_arr(31,21,20,2);
BEGIN
    --Beletenni még egy elemet a tömbbe:
    v_points_2.EXTEND;                  --egy NULL értéket tesz a végére
    v_points_2(v_points_2.LAST) := TRUNC(DBMS_RANDOM.VALUE(1,101));  --a NULL-t átírja a jó értékre, random egészre
    
    --Bejárni és kiírni a tömböt:
    FOR i IN 1..v_points_2.COUNT
    LOOP
        DBMS_OUTPUT.PUT_LINE(v_points_2(i));
    END LOOP;
END;

/

DECLARE
---asszociatív tömb
    TYPE t_tomb IS TABLE OF employees.salary%TYPE INDEX BY pls_integer; --vagy varchar2(30), string(35)
    v_tomb t_tomb;
    idx pls_integer;
BEGIN
    --tömb feltöltése értékekkel
    SELECT employees.salary
    BULK COLLECT INTO v_tomb
    FROM employees
    WHERE employee_id>100;
    
    --tömb bejárása, és a salaryk megnövelése 10%-kal
    idx := v_tomb.FIRST; --idx-be betölti a tömb első elemének indexét
    WHILE idx IS NOT NULL
    LOOP
        v_tomb(idx) := v_tomb(idx)*1.1;
        idx := v_tomb.NEXT(idx);    --lépteti az indexwt
    END LOOP;
END;

/

DECLARE
---beágyazott tábla
    TYPE t_emp IS TABLE OF employees%ROWTYPE;
    v_emp t_emp;
BEGIN
    --tábla feltöltése
    SELECT *
    BULK COLLECT INTO v_emp
    FROM employees
    WHERE employee_id<200;
    
    --tábla bejárása
    FOR i IN 1..v_emp.COUNT
    LOOP
        DBMS_OUTPUT.PUT_LINE(v_emp(i).first_name || ' has the salary of ' || v_emp(i).salary);
    END LOOP;
END;

/

CREATE ---employeesról másolat 
TABLE employees_tmp AS SELECT * FROM employees;

/

DECLARE
---forall
    TYPE t_num_list IS VARRAY(20) OF NUMBER;
    depts t_num_list := t_num_list(10, 30, 70); --ezeket a departmentű dolgozókat kell törölni
BEGIN
    FORALL i IN depts.FIRST .. depts.LAST
    DELETE FROM EMPLOYEES_TMP
    WHERE DEPARTMENT_ID = depts(i);

    FORALL i IN INDICES OF depts
    DELETE FROM EMPLOYEES_TMP
    WHERE DEPARTMENT_ID = depts(i);

    --FORALL i IN VALUES OF depts
    --DELETE FROM EMPLOYEES_TMP
    --WHERE DEPARTMENT_ID = i;
END;

/

DECLARE
---kurzor
    CURSOR cur_salary (p_min_sal employees.salary%TYPE) IS
    SELECT * FROM employees WHERE salary>p_min_sal;
    v_emp_rec employees%ROWTYPE;
BEGIN
    OPEN cur_salary(10000);
    LOOP
        FETCH cur_salary INTO v_emp_rec;
        EXIT WHEN cur_salary%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Salary of ' || v_emp_rec.first_name || ' is ' || v_emp_rec.salary);
    END LOOP;
    CLOSE cur_salary;
END;

/

DECLARE
---nem tárolt eljárás
    PROCEDURE proc  (p_dep_id employees.department_id%type,
                    p_min_sal employees.salary%type) IS
    BEGIN
        for c in
        (select jobs.job_title,count(employee_id) db
        from employees inner join jobs using(job_id)
        where department_id=p_dep_id and salary>p_min_sal
        group by job_title
        order by job_title)
        
        loop   
            dbms_output.put_line(c.job_title||' - '||c.db);
        end loop;
    END;
BEGIN
    proc(50,2000);
END;

/

create ---tárolt függvény
or replace function f_avg(p_man_id employees.manager_id%type)
    return number is
        v_val number;
    begin
        select avg(sysdate-hire_date)/365.25 into v_val
        from employees
        where manager_id=p_man_id;
        
        return v_val;
        EXCEPTION
            when no_data_found then
                return null;
    end;
    
/

declare
---tárolt függvényhez kód
    x employees.manager_id%type;
begin
    x:=101;
    if f_avg(x) is not null 
        then dbms_output.put_line(round(f_avg(x),1));
    else 
        dbms_output.put_line('No data found');
    end if;
end;

/

CREATE ---trigger
OR REPLACE TRIGGER tr_emp_sal_check
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :OLD.salary > :NEW.salary THEN
        RAISE_APPLICATION_ERROR(-20000, 'The salary cannot be decreased.');
    END IF;
END tr_emp_sal_check;

-------------------------------------------------------------------------------------
create or replace function f_teszt(p_asd number)
return number is
begin
return p_asd*2;
end;
/*DECLARE
    ---rekord
    TYPE t_emp IS RECORD (emp_id employees.employee_id%TYPE, sal employees.salary%TYPE);
    v_emp t_emp;
BEGIN
    --update
    UPDATE employees
    SET salary=10000
    WHERE employee_id=102;

    --delete
    DELETE FROM employees WHERE employees.employee_id = 206
    RETURNING employee_id,salary INTO v_emp;

    --kivételkezelés
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nem talált a feltételnek megfelelő adatot');
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Több sort talált mint egy, nem tudja SELCT INTO kezelni');
END;*/



/*DECLARE
---dinamikus tömb
    TYPE t_points_arr IS VARRAY(10) OF number;
    v_points t_points_arr := t_points_arr();
    v_points_2 t_points_arr := t_points_arr(31,21,20,2);
BEGIN
    --Beletenni még egy elemet a tömbbe:
    v_points_2.EXTEND;                  --egy NULL értéket tesz a végére
    v_points_2(v_points_2.LAST) := TRUNC(DBMS_RANDOM.VALUE(1,101));  --a NULL-t átírja a jó értékre, random egészre

    --Bejárni és kiírni a tömböt:
    FOR i IN 1..v_points_2.COUNT
    LOOP
        DBMS_OUTPUT.PUT_LINE(v_points_2(i));
    END LOOP;
END;*/



/*DECLARE
---asszociatív tömb
    TYPE t_tomb IS TABLE OF employees.salary%TYPE INDEX BY pls_integer; --vagy varchar2(30), string(35)
    v_tomb t_tomb;
    idx pls_integer;
BEGIN
    --tömb feltöltése értékekkel
    SELECT employees.salary
    BULK COLLECT INTO v_tomb
    FROM employees
    WHERE employee_id>100;

    --tömb bejárása, és a salaryk megnövelése 10%-kal
    idx := v_tomb.FIRST; --idx-be betölti a tömb első elemének indexét
    WHILE idx IS NOT NULL
    LOOP
        v_tomb(idx) := v_tomb(idx)*1.1;
        idx := v_tomb.NEXT(idx);    --lépteti az indexwt
    END LOOP;
END;*/



/*DECLARE
---beágyazott tábla
    TYPE t_emp IS TABLE OF employees%ROWTYPE;
    v_emp t_emp;
BEGIN
    --tábla feltöltése
    SELECT *
    BULK COLLECT INTO v_emp
    FROM employees
    WHERE employee_id<200;

    --tábla bejárása
    FOR i IN 1..v_emp.COUNT
    LOOP
        DBMS_OUTPUT.PUT_LINE(v_emp(i).first_name || ' has the salary of ' || v_emp(i).salary);
    END LOOP;
END;*/



/*CREATE ---employeesról másolat 
TABLE employees_tmp AS SELECT * FROM employees;

*/
/*
DECLARE
---forall
    TYPE t_num_list IS VARRAY(20) OF NUMBER;
    depts t_num_list := t_num_list(10, 30, 70); --ezeket a departmentű dolgozókat kell törölni
BEGIN
    FORALL i IN depts.FIRST .. depts.LAST
    DELETE FROM EMPLOYEES_TMP
    WHERE DEPARTMENT_ID = depts(i);

    FORALL i IN INDICES OF depts
    DELETE FROM EMPLOYEES_TMP
    WHERE DEPARTMENT_ID = depts(i);

    --FORALL i IN VALUES OF depts
    --DELETE FROM EMPLOYEES_TMP
    --WHERE DEPARTMENT_ID = i;
END;
*/

/*
DECLARE
---kurzor
    CURSOR cur_salary (p_min_sal employees.salary%TYPE) IS
    SELECT * FROM employees WHERE salary>p_min_sal;
    v_emp_rec employees%ROWTYPE;
BEGIN
    OPEN cur_salary(10000);
    LOOP
        FETCH cur_salary INTO v_emp_rec;
        EXIT WHEN cur_salary%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Salary of ' || v_emp_rec.first_name || ' is ' || v_emp_rec.salary);
    END LOOP;
    CLOSE cur_salary;
END;

*/

/*DECLARE
---nem tárolt eljárás
    PROCEDURE proc  (p_dep_id employees.department_id%type,
                    p_min_sal employees.salary%type) IS
    BEGIN
        for c in
        (select jobs.job_title,count(employee_id) db
        from employees inner join jobs using(job_id)
        where department_id=p_dep_id and salary>p_min_sal
        group by job_title
        order by job_title)

        loop   
            dbms_output.put_line(c.job_title||' - '||c.db);
        end loop;
    END;
BEGIN
    proc(50,2000);
END;

*/

/*create ---tárolt függvény
or replace function f_avg(p_man_id employees.manager_id%type)
    return number is
        v_val number;
    begin
        select avg(sysdate-hire_date)/365.25 into v_val
        from employees
        where manager_id=p_man_id;

        return v_val;
        EXCEPTION
            when no_data_found then
                return null;
    end;

*/
/*
declare
---tárolt függvényhez kód
    x employees.manager_id%type;
begin
    x:=101;
    if f_avg(x) is not null 
        then dbms_output.put_line(round(f_avg(x),1));
    else 
        dbms_output.put_line('No data found');
    end if;
end;

*/

/*CREATE ---trigger
OR REPLACE TRIGGER tr_emp_sal_check
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :OLD.salary > :NEW.salary THEN
        RAISE_APPLICATION_ERROR(-20000, 'The salary cannot be decreased.');
    END IF;
END tr_emp_sal_check;*/
