set SERVEROUTPUT on;

/*
BEGIN
FOR c IN (SELECT * FROM LOCATIONS
WHERE COUNTRY_ID='CA')
LOOP
DBMS_OUTPUT.PUT_LINE(c.location_id ||
' ' || c.city);
END LOOP;
END;
*/

/*
--IN MÓD
DECLARE
    v_num NUMBER;
    --alprogram
    PROCEDURE in_num(p_in IN NUMBER) IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(p_in);
    END in_num;
BEGIN
    v_num := 10;
    FOR I IN 1..10 LOOP
        in_num(v_num * i);
    END LOOP;
END;
*/

/*
--OUT MÓD
DECLARE
    v_num NUMBER;
    PROCEDURE out_num(p_out OUT NUMBER) IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(NVL(p_out, -1));
        p_out := 20;
    END out_num;
BEGIN
    v_num := 10;
    out_num(v_num);
    DBMS_OUTPUT.PUT_LINE(v_num);
END;
*/

/*
--IN OUT MÓD
    DECLARE
    v_num NUMBER;
    PROCEDURE inout_num(p_inout IN OUT NUMBER) IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(p_inout);
        p_inout := 30;
    END inout_num;
BEGIN
    v_num := 10;
    inout_num(v_num);
    DBMS_OUTPUT.PUT_LINE(v_num);
END;

*/

/*
DECLARE
    type t_ids IS TABLE OF  employees.employee_id%type;
    v_ids t_ids;
    
    PROCEDURE proc_emp_sal(v_emp_id EMPLOYEES.EMPLOYEE_ID%TYPE) IS
        v_experience NUMBER;
        v_raise      NUMBER(3,2);
    
    BEGIN
        SELECT (SYSDATE - HIRE_DATE) / 365
        INTO v_experience
        FROM EMPLOYEES WHERE EMPLOYEE_ID = v_emp_id;
    
        CASE
            WHEN v_experience > 15 THEN
                v_raise := 1.25;
            WHEN v_experience > 10 THEN
                v_raise := 1.15;
            WHEN v_experience > 5 THEN
                v_raise := 1.05;
            ELSE
                v_raise := 1.02;
        END CASE;
    
        UPDATE EMPLOYEES SET SALARY = SALARY * v_raise
        WHERE EMPLOYEE_ID = v_emp_id;
        
        exception when NO_DATA_FOUND then NULL;
    END;
BEGIN
    SELECT EMPLOYEE_ID BULK COLLECT INTO v_ids from employees where department_id=50;
    for i in 1..v_ids.count loop
        proc_emp_sal(v_ids(i));
    end loop;
END;
/
select * from employees where department_id=50;
*/


/*
declare
    v_num number;
    --függveny
    FUNCTION f_prev_jobs(p_id EMPLOYEES.EMPLOYEE_ID%TYPE)
    RETURN number is v_num number;
    begin
        select count(*) into v_num from job_history where employee_id=p_id;
        return v_num;
    end;
    
begin
    for c in (select first_name,last_name,employee_id from employees)
    loop
        v_num:=f_prev_jobs(c.employee_id);
        if v_num>0 then dbms_output.put_line(c.first_name||' '||c.last_name||' : '||v_num);
        end if;
    end loop;
end;
/
*/


/*
--tárolt függvény lesz
create or replace FUNCTION f_prev_jobs(p_id EMPLOYEES.EMPLOYEE_ID%TYPE)
    RETURN number is v_num number;
    begin
        select count(*) into v_num from job_history where employee_id=p_id;
        return v_num;
    end;

/
select first_name||' '||last_name,f_prev_jobs(employee_id) from employees
where f_prev_jobs(employee_id)>0;
*/


/*
declare
    v_id EMPLOYEES.EMPLOYEE_ID%TYPE;
    v_sal_1 EMPLOYEES.salary%TYPE;
    v_sal_2 EMPLOYEES.salary%TYPE;
    --függveny
    FUNCTION f_higher_sal   (p_id_1 EMPLOYEES.EMPLOYEE_ID%TYPE,
                            p_id_2 EMPLOYEES.EMPLOYEE_ID%TYPE)
    RETURN EMPLOYEES.EMPLOYEE_ID%TYPE is v_id EMPLOYEES.EMPLOYEE_ID%TYPE;
    begin
        select salary into v_sal_1 from employees where employee_id=p_id_1;
        select salary into v_sal_2 from employees where employee_id=p_id_2;
        if v_sal_1>v_sal_2 then v_num:=v_sal_1; end if;
        if v_sal_2>v_sal_1 then v_num:=v_sal_2; end if;
        if v_sal_1=v_sal_2 then v_num:=0; end if;
        
    end;
    
begin
    for c in (select first_name,last_name,employee_id from employees)
    loop
        v_num:=f_prev_jobs(c.employee_id);
        if v_num>0 then dbms_output.put_line(c.first_name||' '||c.last_name||' : '||v_num);
        end if;
    end loop;
end;
*/


create or replace function f(v_emp_id_a EMPLOYEES.EMPLOYEE_ID%TYPE,v_emp_id_b EMPLOYEES.EMPLOYEE_ID%TYPE)
    return EMPLOYEES.EMPLOYEE_ID%TYPE is
    v_salary_a EMPLOYEES.SALARY%TYPE;
    v_salary_b EMPLOYEES.SALARY%TYPE;

BEGIN
    SELECT SALARY INTO v_salary_a
    FROM EMPLOYEES WHERE EMPLOYEE_ID = v_emp_id_a;

    SELECT SALARY INTO v_salary_b
    FROM EMPLOYEES WHERE EMPLOYEE_ID = v_emp_id_b;


    IF v_salary_a > v_salary_b THEN
        return v_emp_id_a;
    ELSIF v_salary_a < v_salary_b THEN
        return v_emp_id_b;
    else return 0;
    END IF;
    exception when no_data_found then return null;
END;
/

begin
dbms_output.put_line(f(150,140));
end;







