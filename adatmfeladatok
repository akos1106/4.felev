set serveroutput on;
/*Írjon tárolt függvényt, amely két részleg azonosítót kap paraméterként, és meghatározza, 
hogy az adott részlegek közül melyiken nagyobb az átlagos munkatapasztalat!
A függvény visszatérési értéke legyen rendre -1, 1 vagy 0, ha az első részlegen nagyobb, ha 
a második részlegen nagyobb, illetve, ha minkét részlegen egyenlő az átlagos munkatapasztalat!
A függvény ne jelenítsen meg semmit!
Írjon programot, amely megjelenít egy üzenetet aszerint, hogy a két részleg közül melyiken 
nagyobb az átlagos munkatapasztalat (a fenti függvény segítségével)!
A várt eredmény a 30-as és 50-es azonosítók mellett: The first department has higher experience.
A várt eredmény a 30-as és 20-as azonosítók mellett: The second department has higher experience.
A várt eredmény a 30-as és 30-as azonosítók mellett: The departments have the same experience.

A kiegészítendő/módosítandó kód:
*/

create or replace FUNCTION f(p_dept_1 employees.department_id%type, p_dept_2 employees.department_id%type)
RETURN NUMBER IS
v_val_1 NUMBER;
v_val_2 NUMBER;
BEGIN
SELECT AVG(SYSDATE-HIRE_DATE) INTO v_val_1 FROM EMPLOYEES WHERE DEPARTMENT_ID = p_dept_1;
SELECT AVG(SYSDATE-HIRE_DATE) INTO v_val_2 FROM EMPLOYEES WHERE DEPARTMENT_ID = p_dept_2;
if v_val_1>v_val_2 then return -1;
elsif v_val_1<v_val_2 then return 1;
else return 0;
end if;
END;

/

DECLARE
x number;
BEGIN
x:=f(30,30);
if x = -1 then dbms_output.put_line('The first department has higher experience.');
elsif x = 1 then dbms_output.put_line('The second department has higher experience.');
elsif x = 0 then dbms_output.put_line('The departments have the same experience.');
end if;

END;

/

--------------------------------------------------------
/*Írjon lokális függvényt, amely egy minimális létszámot kap paraméterként, 
visszatérési éréke pedig azon menedzserek azonosítója, amelyeknek több beosztottja van, 
mint a paraméterként kapott minimális létszám!
A függvény visszatérési értéke legyen beágyazott tábla típusú!
Írjon programot, amely megjeleníti a függvény által visszaadott menedzserek darabszámát 
(azaz a visszaadott kollekció elemszámát)!
A várt eredmény 5 fő esetén: 11
A várt eredmény 7 fő esetén: 6
A várt eredmény 10 fő esetén: 1*/

declare
    type t_manager is table of employees.manager_id%type;
    function f(p_min number)
    return t_manager is
        v_manager t_manager;
    begin
        SELECT manager_id bulk collect into v_manager from employees
        group by manager_id
        having count(*)>p_min;
        
        return v_manager;
    end;
begin
    dbms_output.put_line(f(10).count);
end;
/
-----------------------------------------------------------------------
DECLARE
    x number;
    function f_avg(p_man_id employees.manager_id%type)
    return number is
        v_val employees.salary%type;
    begin
        select avg(salary) into v_val from employees 
        where manager_id=p_man_id;
        return v_val;
        
        exception 
            when no_data_found then return -1;
            
    end f_avg;
begin
    x:=f_avg(250);
    if x>-1 then dbms_output.put_line(x);
    else dbms_output.put_line('No data found.');
    end if;
end;

/
--------------------------------------------
declare
    PROCEDURE proc  (p_dep_id employees.department_id%type,
                    p_min_sal employees.salary%type) is
    begin
        for c in
        (select jobs.job_title,count(employee_id) db
        from employees inner join jobs using(job_id)
        where department_id=p_dep_id and salary>p_min_sal
        group by job_title
        order by job_title)
        
        loop   
            dbms_output.put_line(c.job_title||' - '||c.db);
        end loop;
    end;
begin
    proc(50,2000);
end;
/
--------------------------------------------------------------
/*Írjon lokális függvényt, amely paraméterként kap egy munkakör azonosítót, és visszaadja,
hogy az adott munkakörben dolgozók hány százalékát teszik ki a vállalat teljes létszámának!
Írjon programot, amely megjeleníti azon munkakörök nevét, ahol ez az érték nagyobb,
mint 10 százalék (a fenti függvény segítségével)!
A várt eredmény:
Sales Representative - 28,04
Shipping Clerk - 18,69
Stock Clerk - 18,69
A kiegészítendő/módosítandó kód:
*/

DECLARE
    v_total NUMBER;
    v_count NUMBER;
    function f(job_iddd employees.job_id%type)
    return number is
        ossz number;
        csakott number;
        res number;
    begin
        select count(*) into ossz from employees;
        select count(*) into csakott from employees where job_id=job_iddd;
        res:=(csakott/ossz)*100;
        return res;
    end;
BEGIN
    for c in (select distinct jobs.job_title,employees.job_id
                from employees,jobs
                where employees.job_id=jobs.job_id
                order by job_title)
    loop
        if f(c.job_id)>10 then
            DBMS_OUTPUT.PUT_LINE(c.job_title||' - '||round(f(c.job_id),2));
        end if;
    end loop;
END;
/
--------------------------------------------------------------

create or replace function f_avg(p_man_id employees.manager_id%type)
    return number is
        v_val number;
    begin
        select avg(sysdate-hire_date)/365.25 into v_val
        from employees
        where manager_id=p_man_id;
        
        return v_val;
        EXCEPTION
            when no_data_found then
                return null;
    end;
/
declare
    x employees.manager_id%type;
begin
    x:=101;
    if f_avg(x) is not null 
        then dbms_output.put_line(round(f_avg(x),1));
    else 
        dbms_output.put_line('No data found');
    end if;
end;
    
